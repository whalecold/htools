#!/bin/bash

KUBECTL_TMPFILE="/tmp/hhl.kubectl_alias.tmpfile"
KUBECTL_GET_TMPFILE="/tmp/hhl.kubectl_alias_get.tmpfile"

declare -A _K_KIND_NO_NAMESPACE=( ["node"]=1 ["nodes"]=1 ["no"]=1)

_k_parse_object_line() {
    local kind=$1
    local object=$2
    if test -z "$object";then
        return 1
    elif echo "$object" |grep -q "^[0-9]\+$";then
        awk -v i=$object '{if ($1 == i){print $2, $3}}' $KUBECTL_GET_TMPFILE.$kind 2>/dev/null
    else
        return 1
    fi
}

_find_ns() {
    local ns=
    local name=
    if test -n "$2";then
        read ns name < <(_k_parse_object_line $1 $2)
        if test -z "$name";then
            if [ "${_K_KIND_NO_NAMESPACE[$1]}" != 1 ];then
                kubectl get $1 --all-namespaces | awk -v p=$2 '{if ($2 == p) {print $1,$2}}'
                return
            fi
        fi
    fi
    echo "$ns" "$name"
}

_k_do() {
    local action=$1
    local kind=$2
    local object=$3
    shift
    shift
    shift

    if [ "$action" != get -a "$object" = "" ];then
        _k_get $kind
        return
    fi

    if [[ "$object" == "/"* || "$object" == "." ]];then
        echo kubectl $action $kind $@ --all-namespaces
        kubectl $action $kind $@ --all-namespaces
        return
    fi

    if [[ "$object" == "."* ]];then
        ns=${object#.}
        if [ "$ns" = ".ks" ];then
            ns=kube-system
        fi
        echo kubectl -n $ns $action $kind $@
        kubectl -n $ns $action $kind $@
        return
    fi

    read ns object < <(_find_ns "$kind" "$object")
    if [ "$kind" = all ];then
        if [[ "$kind" == "all" && "$object" == *"/"* ]];then
            kind=${object%%/*}
            kind=${kind%%.*}
            object=${object#*/}
        fi
    fi

    if test -n "$ns";then
        if [ "$action" = logs ];then
            kind=
        elif [ "$action" = exec ];then
            kind=
            if [ "$1" = "" ];then
                set -- bash
            fi
            set -- -it -- "$@"
        fi

        echo kubectl -n $ns $action $kind $object $@
        kubectl -n $ns $action $kind $object $@
    else
        echo "can not find namespace for: $@"
        return
    fi
}

_kddps() {
    _k_get pod . -o custom-columns=.:.metadata.name,.:.status.hostIP > $tmpfile
    while test -n "$1"
    do
        grep -- "$1" $tmpfile >$tmpfile-tmp
        /usr/bin/mv $tmpfile-tmp $tmpfile
        shift
    done

    cat $tmpfile
    echo " ** The above pods will be deleted **"
    read -N 1 -p " ** press any 'y' to continue **  " r
    echo ""
    [ "$r" != y ] && return
    while read pod other
    do
        _k_do delete pod $pod
    done < $tmpfile

}

_k_get() {
    local kind=
    local object=

    if [[ "$1" == *"/"* ]];then
        kind=${1%%/*}
        kind=${kind%%.*}
        object=${1#*/}
        shift
    else
        kind=$1
        object=$2
        shift
        shift
    fi

    pattern=.
    if [[ "$object" = "/"* ]];then
        pattern=${object##/}
        object=
    fi
    if test -n "$object";then
        _k_do get "$kind" "$object" "$@"
    elif test -n "$kind";then
        kubectl get "$kind" --all-namespaces -o wide 2>&1| grep "$pattern"| nl -v0 -s' ' -nln -w3 | tee $KUBECTL_GET_TMPFILE.$kind
        if [ "${_K_KIND_NO_NAMESPACE[$kind]}" = 1 ];then
            sed -i 's/ / default /' $KUBECTL_GET_TMPFILE.$kind
        fi
    fi

}

_k_describe() {
    local kind=
    local object=

    if [[ "$1" == *"/"* ]];then
        kind=${1%%.*}
        object=${1#*/}
        shift
    else
        kind=$1
        object=$2
        shift
        shift
    fi
    _k_do describe $kind $object "$@"
}

_k_scale() {
    local kind="$1"
    local object="$2"
    local num="${3:-0}"
    shift
    shift
    shift
    _k_do scale "$kind" "$object" --replicas="$num" "$@"

}


## get 
alias kg='_k_get'
alias kgp='_k_get pod'
alias kgs='_k_get svc'
alias kgd='_k_get deployment'
alias kgn='_k_get node'
alias kgc='_k_get configmap'
alias kgnw='_k_get net-attach-def'
alias kga='_k_get all'

## describe
alias kd='_k_describe'
alias kdp='_k_describe pod'
alias kds='_k_describe svc'
alias kdd='_k_describe deployment'
alias kdn='_k_describe node'
alias kdc='_k_describe configmap'
alias kdnw='_k_describe net-attach-def'
alias kda='_k_describe all'

## delete
alias kddps='_kddps'
alias kddp='_k_do delete pod'
alias kdds='_k_do delete svc'
alias kddd='_k_do delete deployment'

## edit
alias ke='_k_do edit'
alias kep='_k_do edit pod'
alias kes='_k_do edit svc'
alias ked='_k_do edit deployment'
alias kenw='_k_do edit net-attach-def'
alias kec='_k_do edit configmap'

## log
alias klp="_k_do logs pod"

## port-forward
alias kpf='_k_do port-forward pod'

alias kx='_k_do exec pod'
alias kfa="kubectl apply -f"
alias kfc="kubectl create -f"
alias kfd="kubectl delete -f"
alias kfp="kubectl patch -f"


## kubectl -n kube-system
alias ks='kubectl -n kube-system'
alias ksd='_k_scale deployment'


############ contiv ETCD =================
alias cetcd="etcdctl --endpoint http://0.0.0.0:6666"
ETCDCTL="etcdctl --endpoint http://0.0.0.0:6666"
_cetcd_ls() {
    test -z "$1" && set -- obj oper state
    
    echo "================"
    while test -n "$1"
    do
        $ETCDCTL ls -r /contiv.io/"$1"
        shift
        echo ""
    done
}

CETCD_TMPFILE="/tmp/cetcdh-get.tmpfile"
_cetcd_find_internal() {
    local tmpfile=$CETCD_TMPFILE
    _cetcd_ls > $tmpfile

    while test -n "$1"
    do
        grep -- "$1" $tmpfile >$tmpfile-tmp
        /usr/bin/mv $tmpfile-tmp $tmpfile
        shift
    done
}

_cetcd_find() {
    echo "================"
    _cetcd_find_internal "$@"
    cat $CETCD_TMPFILE
}

_cetcd_get() {
    local tmpfile=$CETCD_TMPFILE

    confirm=1
    format=0

    while test -n "$1"
    do
        if [ "$1" = "-f" ];then
            format=1
        elif [ "$1" = "-y" ];then
            confirm=0
        else
            break
        fi
        shift
    done

    _cetcd_find_internal "$@"

    if [ "$confirm" = 1 ];then
        cat $tmpfile
        echo " ** The above keys will be displayed **"
        read -N 1 -p " ** press any 'y' to continue **  " r
        echo ""
        [ "$r" != y ] && return
    fi

    echo "================"
    while read line
    do
        echo "## $line ##"
        if [ "$format" = 1 ];then
            $ETCDCTL get $line | jq .
        else
            $ETCDCTL get $line
        fi
        echo ""
    done <$tmpfile
}

_cetcd_main() {
    if [ "$1" = l ];then
        shift
        _cetcd_ls "$@"
    elif [ "$1" = g ];then
        shift
        _cetcd_get "$@"
    elif [ "$1" = f ];then
        shift
        _cetcd_find "$@"
    else
        echo "  help: "
        echo "        cetcdh l [state|oper|obj] ..."
        echo "        cetcdh f [pattern] ..."
        echo "        cetcdh g [-y] [-f] [pattern] ..."
    fi
}

alias cetcdh="_cetcd_main"
